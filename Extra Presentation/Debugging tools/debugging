INTRO:

Debugging is a process of finding and reducing the number of bugs, or defects. Debugging occurs as a 
consequence of successful testing. That is, when a test case uncovers an error, debugging is the process
 that results in the removal of the error


STEPS OF DEBUGGING:


1. Gather information

Know the fundamentals of the system
Understand the frameworks involved
Read the APIs and communication interfaces
Understand what each module of the system does


2 Make it fail
Start at the beginning
Automate the failure
No detail is insignificant
Intermittent failures?
Isolate the failure

3 Collect Clues

Collect clues as to bug
Clues suggest where problem might be
ex:using type of error,etc.


4. Quit thinking and look

Gather the low level details and "see" the failure
Understand the context of the bug\
Be methodical
Make no assumptions
Understand the bug


5. Narrow the search down
Start at the bad end (e.g. the error log) and work
your way up the chain looking at the various
points on the way
Fix the bugs you know about - fixing one could
fix the other
Fix the noise first, but dont go nuts

6. Change one thing at a time

Compare with a good one !
Use a rifle not a shotgun
Whats changed recently, it used to work!
Separate environment and product

7. Keep an audit trail

Keep a day book of what you did
During debugging write down...
1.What you did...
2.In what order...
3.And what happened!
Be specific and consistent

8. Fix it & re-test

Attempt to replicate again
• No temporary workarounds!
• May introduce other issues
• Never get replaced with true solutions

9 Get a fresh view

Get another viewpoint on the solution
Talk to somebody about the problem
Ask an expert:
● Email the author
● Check the forums
● Subscribe to the mailing list

10 If you didn't fix it, it ain't fixed

The most important lesson by far...
●Fix the root cause
●Make sure it cant possibly happen again
●Fix the process at fault


TYPES OF DEBUGGING:

1 BRUTE FORCE: most common and least efficient for isolating the
cause of a software error.
• a printout of all registers and relevant memory
locations is obtained and studied. All dumps
should be well documented and retained for
possible use on subsequent

2 Print/Trace Debugging - watching the flow of execution after
adding print statements to the original code
Remote Debugging - connect to a remote system with a
debugger, monitor the execution and state
Post Mortem Debugging - analysis of a memory dump from a
program that has crashed
Profiling - not debugging per se, but a useful technique for
analysing a running program to look for issues

3. Back Tracking Method
• It is a quite popular approach of debugging which
is used effectively in case of small applications.
• The process starts from the site where a particular
symptom gets detected, from there on backward
tracing is done across the entire source code till we
are able to lay our hands on the site being the
cause.
• Unfortunately, as the number of source lines
increases, the number of potential backward paths
may become unmanageably large.

4 Divide & Conquer
Identify different code sections
Set breakpoints at the boundaries
Isolate issue to one particular area
Focus efforts on that area
introduces the concept of binary partitioning



TIPS:

1. Computers aren’t random, and neither are bugs
2. Persistence will always pay off
3. Don’t be afraid to dive deep
4. Don’t make assumptions or
take things for granted

LONG-TERM RESULTS:

• Gain experience
• Learn how the system works
• Develop a “sixth sense”

QUOTATIONS:

Bugs are logical

“The bug is not moving around in your code, trying to trick or evade you. 
It is just siting in one place, doing the wrong thing in the same way every time.”

“ If debugging is the process of removing software bugs, then programming must be the process of 
putting them in. ”

“First, solve the problem. Then, write the code.”

Enjoy that moment when you find the bug

Error messages are your best friend. : You will grow to love them for the useful information they 
give you. 

GDB may not be intuitive but it is very powerful
▪ Easy to use, just not so easy to learn
TUI: Text User Interface
▪ As useful as it is poorly named!
Multiprocess Debugging
Debug multiple ‘inferiors’ simultaneously
Add new inferiors
Follow fork/exec


g++ -g memsim.cpp  (for c : gcc -g memsim.c)
gdb ./a.out

https://web.eecs.umich.edu/~sugih/pointers/summary.html
https://www.tutorialspoint.com/gnu_debugger/gdb_commands.htm  

seg fault - detected
divide by 0 - detected
mem leak - undetected
access unallocated mem - detected but can't specify what the error is
access unallocated mem (static) - detected but can't specify what the error is
access uninitailised mem - undetected 	
overflow - undetected


COMMANDS:
r
	run
c
	continue
tbreak
	temporary breakpoint
rbreak
	reg-ex breakpoint
break xxx if yyy
	conditionally break at xxx if condition yyy holds
commands
	list of commands to be executed when a breakpoint is hit
silent
	special command to suppress output on breakpoint hit
save breakpoints
	save a list of breakpoints to a script
save history
	save history of executed gdb commands
call
	call a function in the inferior
watch -l
	watchpoint based on address (location)
rwatch
	read watchpoint
info line foo.c:42
	show PC for line
info line * $pc
	show line begin/end for current program counter
thread apply all bt
	backtrace for every thread
dprintf
	dynamic printf
ctrl-x-a: toggle to/from TUI mode
ctrl-l: refresh the screen
ctrl-p / ctrl-n: prev, next, commands
ctrl-x-2: second window; cycle through
backtrace - produces a stack trace of the function calls that
lead to a seg fault (should remind you of Java exceptions)
where - same as backtrace; you can think of this version as
working even when you’re still in the middle of the program
finish - runs until the current function is finished
delete - deletes a specified breakpoint

f - Runs until the current function is finished

s - Runs the next line of the program

s N - Runs the next N lines of the program

n - Like s, but it does not step into functions

u N - Runs until you get N lines in front of the current line

p var - Prints the current value of the variable "var"

bt - Prints a stack trace

u - Goes up a level in the stack

d - Goes down a level in the stack

q - Quits gdb



VALGRIND

Valgrind is a memory mismanagement detector. It shows you memory leaks, de-allocation errors,
etc. Actually, Valgrind is a wrapper around a collection of tools that do many other things (e.g.,
cache profiling); however, here we focus on the default tool, Memcheck.

Easy to execute, e.g.:
valgrind --tool=memcheck ls
It becomes very popular
One of the two most popular dynamic instrumentation tools Pin and Valgrind
Very good usability, extendibility, robust
Overhead is the problem
5-10X slowdown without any instrumentation

g++ -Wall -pedantic -g program.cpp (for c : gcc -Wall -pedantic -g program.c)
valgring ./a.out

http://cs.ecs.baylor.edu/~donahoo/tools/valgrind/
http://pages.cs.wisc.edu/~bart/537/valgrind.html

seg fault - detected
divide by 0 - detected
mem leak - detected
access unallocated mem (dynamic) - detected
access unallocated mem (static) - detected
access uninitailised mem - detected 	(???)
overflow - detection is input dependent (undetected if no overflow for given input)


Kdevelop

KDevelop is a modern integrated development environment (IDE) for C++ (and other languages)
that is one of many KDE applications.
GUI

USAGE:

Attach the file and debug (very similar to GDB).

seg fault - detected but can't specify where
divide by 0 - detected but can't specify where
mem leak - undetected
access unallocated mem - detected but can't specify where
access unallocated mem (static) - detected but can't specify where
access uninitailised mem - undetected 	
overflow - unknown